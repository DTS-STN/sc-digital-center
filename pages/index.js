import Head from 'next/head'
import Image from 'next/image'
import DateModified from '../components/atoms/DateModified'
import Footer from '../components/molecules/Footer'
import styles from '../styles/Home.module.css'
import { getLocalTopics } from './api/getData'

export default function Home() {
  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>
          Welcome to <a href="https://nextjs.org">Next.js!</a>
        </h1>
        <DateModified />

        <p className={styles.description}>
          Get started by editing{' '}
          <code className={styles.code}>pages/index.js</code>
        </p>

        <div className={styles.grid}>
          <a href="https://nextjs.org/docs" className={styles.card}>
            <h2>Documentation &rarr;</h2>
            <p>Find in-depth information about Next.js features and API.</p>
          </a>

          <a href="https://nextjs.org/learn" className={styles.card}>
            <h2>Learn &rarr;</h2>
            <p>Learn about Next.js in an interactive course with quizzes!</p>
          </a>

          <a
            href="https://github.com/vercel/next.js/tree/master/examples"
            className={styles.card}
          >
            <h2>Examples &rarr;</h2>
            <p>Discover and deploy boilerplate example Next.js projects.</p>
          </a>

          <a
            href="https://vercel.com/new?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
            className={styles.card}
          >
            <h2>Deploy &rarr;</h2>
            <p>
              Instantly deploy your Next.js site to a public URL with Vercel.
            </p>
          </a>
        </div>
      </main>

      <footer>
        {/* <h2 className="sr-only">{"siteFooter"}</h2> */}
        <div className="layout-container mt-5">ReportAProblem</div>
        <div className="layout-container mb-2">
          <DateModified date={process.env.NEXT_PUBLIC_BUILD_DATE} />
        </div>
        <Footer
          footerLogoAltText="symbol2"
          footerLogoImage="/wmms-blk.svg"
          footerNav1="aboutGovernment"
          footerNav2="aboutThisSite"
          links={[
            {
              link: 'footerSocialMediaURL',
              linkText: 'footerSocialMedia',
            },
            {
              link: 'footerMobileAppURL',
              linkText: 'footerMobileApp',
            },
            {
              link: 'footerTermsAndConditionURL',
              linkText: 'footerTermsAndCondition',
            },
            {
              link: 'footerPrivacyURL',
              linkText: 'footerPrivacy',
            },
          ]}
          footerBoxLinks={[
            {
              footerBoxlink: 'footerContactUsURL',
              footerBoxLinkText: 'footerContactUs',
            },
            {
              footerBoxlink: 'footerNewsURL',
              footerBoxLinkText: 'footerNews',
            },
            {
              footerBoxlink: 'footerPmURL',
              footerBoxLinkText: 'footerPm',
            },
            {
              footerBoxlink: 'footerDepartmentAgenciesURL',
              footerBoxLinkText: 'footerDepartmentAgencies',
            },

            {
              footerBoxlink: 'footerTreatiesURL',
              footerBoxLinkText: 'footerTreaties',
            },
            {
              footerBoxlink: 'footerHowGovWorksURL',
              footerBoxLinkText: 'footerHowGovWorks',
            },
            {
              footerBoxlink: 'footerPublicServiceURL',
              footerBoxLinkText: 'footerPublicService',
            },
            {
              footerBoxlink: 'footerGovReportingURL',
              footerBoxLinkText: 'footerGovReporting',
            },
            {
              footerBoxlink: 'footerOpenGovURL',
              footerBoxLinkText: 'footerOpenGov',
            },
          ]}
        />
      </footer>
    </div>
  )
}

export async function getStaticProps() {
  let topicsData = []
  let errorCode = false

  //
  // IF content enabled get the data from the api
  //

  if (!process.env.NEXT_CONTENT_API) {
    // const { apiData, error } = await getTopics(locale);

    let topics = []

    // extract data from apiData then add it to the array topics

    topicsData = topics
    // errorCode = error;
    errorCode = false
  } else {
    //
    // Else get the content from the local file
    //
    const { localData } = getLocalTopics()

    topicsData = localData
    errorCode = false
  }

  return {
    props: {
      topicsData,
      errorCode,
    },
  }
}
